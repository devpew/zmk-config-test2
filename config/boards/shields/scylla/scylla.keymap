/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>


#define DEFAULT 0
#define KEYPAD  1
#define WASD    2
#define QWERTY  3


#define NONE 0

/ {

    behaviors {
        tdq: tap_dance_qwerty {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_QWERTY";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&mo KEYPAD>, <&mo KEYPAD>, <&tog QWERTY>;
        };
        td_bt: tapdance_bluetooth_clear {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_BLUETOOTH_CLEAR";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&trans>, <&trans>, <&bt BT_CLR>;
        };
        tabtil: tab_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "TAB_TILDE";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp GRAVE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };axcraaprgaprgaprg;aprgaprgaprgaprgaprgqwt;aprgqwt;dqwt;rrrrrrprgaprgqwt;

    keymap {
        compatible =  "zmk,keymap" ;

        default_layer {
// --------------------------------------------------------------------------------------------------------------------------------------------------
// | ESC    |   1       |   2       |   3       |   4       |  5    |  ---  |   6       |   7       |   8       |   9       |   0       |   BKSP    |
// | TAB    |   Q       |   W       |   F       |   P       |  G    |  ---  |   J       |   L       |   U       |   Y       |   ;       |   `       |
// | BKSP   |   A       |   R       |   S       |   T       |  D    |  ---  |   H       |   N       |   E       |   I       |   O       |   '       |
// | CTRL   |   Z       |   X       |   C       |   V       |  B    |  ---  |   K       |   M       |   ,       |   .       |   /       |   -       |
// | RAISE  |   LGUI    |   LSHIFT  |   LALT    |   LCTRL   |          ---              |   ENTER   |   DEL     |   RSHIFT  |   SPACE     |   RAISE   |
            bindings = <
   &kp ESC      &kp N1      &kp N2      &kp N3      &kp N4      &kp N5          &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      &kp BSPC
   &tabtil      &kp Q       &kp W       &kp F       &kp P       &kp G           &kp J       &kp L       &kp U       &kp Y       &kp SEMI    &kp GRAVE
   &kp BSPC     &kp A       &kp R       &kp S       &kp T       &kp D           &kp H       &kp N       &kp E       &kp I       &kp O       &kp SQT
   &kp LCTRL    &kp Z       &kp X       &kp C       &kp V       &kp B           &kp K       &kp M       &kp COMMA   &kp DOT     &kp FSLH    &kp MINUS
   &mo KEYPAD   &kp LGUI    &kp LSHIFT  &kp LALT    &kp LCTRL                               &kp RET     &kp DEL     &kp RSHIFT  &kp SPACE   &mo KEYPAD

            >;

        };


        keypad_layer {
// --------------------------------------------------------------------------------------------------------------------------------------------------
// | BT_CLR     |   F1      |   F2      |   F3      |   F4      |  F5   |  ---  |   F6      |   F7      |   F8      |   [       |   ]       |           |
// | bt0        |   HOME    |   ^       |   END     |   PGUP    |       |  ---  |   \       |   7       |   8       |   9       |   -       |   =       |
// | bt1        |   <-      |   v       |   ->      |   PGDN    |       |  ---  |   *       |   4       |   5       |   6       |   +       |           |
// | bt2        |           |           |           |           |       |  ---  |   0       |   1       |   2       |   3       |   \       |           |
// |            |           |           |           |           |          ---              |           |           |           |           |           |
            bindings = <
&td_bt          &kp F1      &kp F2      &kp F3      &kp F4      &kp F5          &kp F6          &kp F7      &kp F8      &kp LBKT    &kp RBKT    &trans
&bt BT_SEL 0    &kp HOME    &kp UP      &kp END     &kp PG_UP   &trans          &kp KP_DIVIDE   &kp N7      &kp N8      &kp N9     &kp KP_MINUS &kp EQUAL
&bt BT_SEL 1    &kp LEFT    &kp DOWN    &kp RIGHT   &kp PG_DN   &trans          &kp KP_MULTIPLY &kp N4      &kp N5      &kp N6      &kp KP_PLUS &trans
&bt BT_SEL 2    &trans      &trans      &trans      &trans      &trans          &kp N0          &kp N1      &kp N2      &kp N3      &kp BSLH    &trans
    &trans      &trans      &trans      &trans      &trans                                      &trans      &trans      &trans      &trans      &trans
            >;
        };

        wasd_layer {
// --------------------------------------------------------------------------------------------------------------------------------------------------
// |        |   F1      |   F2      |   F3      |   F4      |  F5   |  ---  |   F6      |   F7      |   F8      |   F9      |   F10     |           |
// |        |           |           |           |           |       |  ---  |           |           |           |           |           |           |
// | BT_NXT |           |           |           |           |       |  ---  |           |           |           |           |           |           |
// |        |           |           |           |           |       |  ---  |           |           |           |           |           |           |
// |        |           |           |           |           |          ---              |           |           |           |           |           |
            bindings = <
   &trans   &trans      &kp F2      &kp F3      &kp F4      &kp F5          &kp F6          &kp F7      &kp F8      &kp F9      &kp F10     &trans
   &trans   &trans      &trans      &kp END     &trans      &trans          &trans          &trans      &trans      &trans      &trans      &trans
   &trans   &trans      &trans      &kp RIGHT   &trans      &trans          &trans          &trans      &trans      &trans      &trans      &trans
   &trans   &trans      &trans      &trans      &trans      &trans          &trans          &trans      &trans      &trans      &trans      &trans
   &trans   &trans      &trans      &trans      &trans                                      &trans      &trans      &trans      &trans      &trans
            >;
        };


//    qwerty_layer {
// --------------------------------------------------------------------------------------------------------------------------------------------------
// |        |           |           |           |           |       |  ---  |           |           |           |           |           |           |
// |        |   Q       |   W       |   E       |   R       |  T    |  ---  |   Y       |   U       |   I       |   O       |   P       |           |
// |        |   A       |   S       |   D       |   F       |  G    |  ---  |   H       |   J       |   K       |   L       |   ;       |           |
// |        |   Z       |   X       |   C       |   V       |  B    |  ---  |   N       |   M       |           |           |           |           |
// |        |           |           |           |           |          ---              |           |           |           |           |           |
//            bindings = <
//   &trans       &trans      &trans      &trans      &trans      &trans          &kp N6      &trans      &trans      &trans      &trans      &trans
//   &trans       &kp Q       &kp W       &kp E       &kp R       &kp T           &kp Y       &kp U       &kp I       &kp O       &kp P       &trans
//   &trans       &kp A       &kp S       &kp D       &kp F       &kp G           &kp H       &kp J       &kp K       &kp L       &kp SEMI    &trans
//   &trans       &kp Z       &kp X       &kp C       &kp V       &kp B           &kp N       &kp M       &trans      &trans      &trans      &trans
//   &trans       &trans      &trans      &trans      &trans                                  &trans      &trans      &trans      &trans      &trans
//            >;
//
//        };

    };


};
